{
    "patches": [
        {
            "label": "2024-12-05_17-05-02",
            "content": "@@ -1,46 +1,4 @@\n-import %7B stringify %7D from %22querystring%22;%0A%0A\n func\n@@ -377,1055 +377,17 @@\n ass \n-Pessoa %7B%0A    private nome : string;%0A    private dinheiro: number;%0A%0A    constructor (nome: string, dinheiro: number) %7B%0A        this.nome = nome;%0A        this.dinheiro = dinheiro;%0A    %7D%0A%0A    toString(): string %7B%0A        return %60$%7Bthis.nome%7D:$%7Bthis.dinheiro%7D%60%0A    %7D%0A%0A    getNome(): string %7B%0A        return this.nome;%0A    %7D%0A    getdinheiro(): number%7B%0A        return this.dinheiro;%0A    %7D%0A%0A%0A%7D%0A%0Aclass Moto %7B%0A    private custo: number;%0A    private motorista: Pessoa %7C null;%0A    private passageiro: Pessoa %7C null;%0A%0A    constructor() %7B%0A        this.custo = 0;%0A        this.motorista = null;%0A        this.passageiro = null;%0A    %7D%0A%0A    toString(): string %7B%0A        return %60Cost: $%7Bthis.custo%7D, Driver: $%7Bthis.motorista%7D, Passenger$%7Bthis.passageiro%7D%60;%0A    %7D%0A%0A    getcusto(): number %7B%0A        return this.custo;%0A    %7D%0A    getmotorista(): Pessoa %7C null %7B%0A        return this.motorista;%0A    %7D%0A    getpassageiro(): Pessoa %7C null %7B%0A        return this.passageiro;%0A    %7D%0A%7D%0A%0A%0A%0A%0Aclass Adapter %7B%0A    moto: Moto;%0A    constructor() %7B%0A        this.moto = new Moto();%0A    %7D\n+Adapter %7B\n %0A   \n@@ -438,50 +438,8 @@\n d %7B%0A\n-        this.moto.setDriver(name, money);%0A\n     \n"
        },
        {
            "label": "2024-12-05_18-12-08",
            "content": "import { stringify } from \"querystring\";\n\nfunction input(): string { let X: any = input; X.L = X.L || require(\"fs\").readFileSync(0).toString().split(/\\r?\\n/); return X.L.shift(); } // _TEST_ONLY_\n//function input(): string { let X: any = input; X.P = X.P || require(\"readline-sync\"); return X.P.question() } // _FREE_ONLY_\nfunction write(text: any, endl=\"\\n\") { process.stdout.write(\"\" + text + endl); }\nexport {};\n\nclass Pessoa {\n    private nome : string;\n    private dinheiro: number;\n\n    constructor (nome: string, dinheiro: number) {\n        this.nome = nome;\n        this.dinheiro = dinheiro;\n    }\n\n    toString(): string {\n        return `${this.nome}:${this.dinheiro}`\n    }\n\n    getNome(): string {\n        return this.nome;\n    }\n    getdinheiro(): number{\n        return this.dinheiro;\n    }\n\n\n}\n\nclass Moto {\n    private custo: number;\n    private motorista: Pessoa | null;\n    private passageiro: Pessoa | null;\n\n    constructor() {\n        this.custo = 0;\n        this.motorista = null;\n        this.passageiro = null;\n    }\n\n    toString(): string {\n        return `Cost: ${this.custo}, Driver: ${this.motorista}, Passenger${this.passageiro}`;\n    }\n\n    getcusto(): number {\n        return this.custo;\n    }\n    getmotorista(): Pessoa | null {\n        return this.motorista;\n    }\n    getpassageiro(): Pessoa | null {\n        return this.passageiro;\n    }\n}\n\n\n\n\nclass Adapter {\n    moto: Moto;\n    constructor() {\n        this.moto = new Moto();\n    }\n    setDriver(name: string, money: number): void {\n        this.moto.setDriver(name, money);\n    }\n\n    setPassenger(name: string, money: number): void {\n    }\n\n    drive(distance: number): void {\n    }\n\n    leavePassenger(): void {\n    }\n\n    show(): void {\n    }\n}\n\nfunction main(): void {\n    let adapter: Adapter = new Adapter();\n    while (true) {\n        write(\"$\", \"\");\n        const line = input();\n        const args = line.split(\" \");\n        write(line);\n\n        if      (args[0] === \"end\"      ) { break;                                   }\n        else if (args[0] === \"setDriver\") { adapter.setDriver(args[1], +args[2]);    }\n        else if (args[0] === \"setPass\"  ) { adapter.setPassenger(args[1], +args[2]); }\n        else if (args[0] === \"drive\"    ) { adapter.drive(+args[1]);                 }\n        else if (args[0] === \"leavePass\") { adapter.leavePassenger();                }\n        else if (args[0] === \"show\"     ) { adapter.show();                          }\n        else                              { console.log(\"fail: command not found\");  }\n    }\n}\n\nmain();\n"
        }
    ]
}